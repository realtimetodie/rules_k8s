"""Declare runtime dependencies

These are needed for local dev, and users must install them as well.
See https://docs.bazel.build/versions/main/skylark/deploying.html#dependencies
"""

load("//k8s/private:toolchains_repo.bzl", "PLATFORMS", "toolchains_repo")
load("//k8s/private:versions.bzl", "TOOL_VERSIONS")

# Expose as Public API
KUBECTL_LATEST_VERSION = TOOL_VERSIONS.keys()[0]

_DOC = "Fetch external dependencies needed to run the kubectl executable"
_ATTRS = {
    "kubectl_version": attr.string(values = TOOL_VERSIONS.keys(), default = KUBECTL_LATEST_VERSION),
    "platform": attr.string(mandatory = True, values = PLATFORMS.keys()),
    "integrity_hashes": attr.string_dict(),
}

def _kubectl_repo_impl(repository_ctx):
    filename = "kubectl"

    # The binaries of the kubectl cli releases for windows are suffixed with ".exe"
    if repository_ctx.attr.platform.startswith("win32"):
        filename += ".exe"

    # The tags of the kubectl cli releases are prefixed with "cli/", eg. cli/v10.0.0
    url = "https://dl.k8s.io/release/{0}/bin/linux/amd64/{2}".format(
        repository_ctx.attr.kubectl_version,
        repository_ctx.attr.platform,
        filename,
    )

    integrity = repository_ctx.attr.integrity_hashes.get(
        repository_ctx.attr.platform,
        None,
    )
    if not integrity:
        if repository_ctx.attr.kubectl_version not in TOOL_VERSIONS.keys():
            fail("""\
kubectl version {} does not have hashes mirrored in rules_k8s, please either
    - Set the integrity_hashes attribute to a dictionary of platform/hash
    - Choose one of the mirrored versions: {}
""".format(repository_ctx.attr.kubectl_version, TOOL_VERSIONS.keys()))

        integrity = TOOL_VERSIONS[repository_ctx.attr.kubectl_version][repository_ctx.attr.platform]

    repository_ctx.download(
        output = filename,
        url = url,
        integrity = integrity,
        executable = True,
    )
    build_content = """# Generated by kubectl/repositories.bzl
load("@rules_k8s//k8s:toolchain.bzl", "kubectl_toolchain")
kubectl_toolchain(
    name = "kubectl_toolchain",
    kubectl = "%s",
)
""" % filename

    # Base BUILD file for this repository
    repository_ctx.file("BUILD.bazel", build_content)

kubectl_repositories = repository_rule(
    _kubectl_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

# Wrapper macro around everything above, this is the primary API
def k8s_register_toolchains(name, register = True, **kwargs):
    """Convenience macro for users which does typical setup.

    - create a repository for each built-in platform like "kubectl_linux_amd64"
    - create a repository exposing toolchains for each platform like "kubectl_platforms"
    - register a toolchain pointing at each platform
    Users can avoid this macro and do these steps themselves, if they want more control.
    Args:
        name: base name for all created repos, like "kubectl"
        register: whether to call through to native.register_toolchains.
            Should be True for WORKSPACE users, but false when used under bzlmod extension
        **kwargs: passed to each kubectl_repositories call
    """

    for platform in PLATFORMS.keys():
        kubectl_repositories(
            name = name + "_" + platform,
            platform = platform,
            **kwargs
        )
        if register:
            native.register_toolchains("@%s_toolchains//:%s_toolchain" % (name, platform))

    toolchains_repo(
        name = name + "_toolchains",
        user_repository_name = name,
    )

